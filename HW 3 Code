kputc(uchar c)

volatile struct pl011_uart_csreg *regptr;

/* Pointer to the UART control and status register */
regptr = (struct pl0111_uart_csreg *)0x20201000;

while (regptr->fr & PL011_FR_TXFF) //hold here until register is open
{
  
}

regptr->dr = c;

return c;



getc (void)

volatile struct pl011_uart_csreg *regptr;
uchar c = '\0';

regptr = (struct pl011_uart_csreg *)0x20201000;

int i;
for(int = 0; i<UNGETMAX; i++)
{
  if(ungetArray[i] != '\0)
  {
    c = ungetArray[i];
    break;
  }
}

if(c == '\0')
{
  c=regptr->dr;
}

return c;



for kcheckc

WHAT WE NEED TO DO FOR KCHECKC

/**
 * kcheckc - check to see if a character is available.
 * @return true if a character is available, false otherwise.
 */
syscall kcheckc(void)
{
    volatile struct pl011_uart_csreg *regptr;
    regptr = (struct pl011_uart_csreg *)0x20201000;
    
    int i;
    for(i = 0; i < UNGETMAX; i++)
    {
      if(ungetArray[i] != '\0')
      {
        return 1;
      }
    }
    
    if(regptr->fr & PL011_FR_TXFF)
    {
      return 1;
    }
    
    return 0; //didn't work but something printed out from calling it. Not sure how. 
}


testcases

void callCheckTrue();
void callCheckFalse(); //add these to top

add callCheckTrue();
and callCheckFalse(); before last TEST END in testcases

void callCheckTrue()
{
  volatile struct pl011_uart_csreg *regptr;
  regptr = (struct pl011_uart_csreg *)0x20201000;
  
  regptr->dr = 'A';
  
  int returnValue = kcheckc();
  kprintf("Value returned for callCheckTrue is %d\r\n\", returnValue);
}

void callCheckFalse()
{
  volatile struct pl011_uart_csreg *regptr;
  regptr = (struct pl011_uart_csreg *)0x20201000;
  
  int returnValue = kcheckc();
  kprintf("Value returned for callCheckFalse is %d\r\n", returnValue);
}
