kputc(uchar c)

volatile struct pl011_uart_csreg *regptr;

/* Pointer to the UART control and status register */
regptr = (struct pl0111_uart_csreg *)0x20201000;

while (regptr->fr & PL011_FR_TXFF) //hold here until register is open
{
  
}

regptr->dr = c;

return c;



getc (void)

volatile struct pl011_uart_csreg *regptr;
uchar c = '\0';

regptr = (struct pl011_uart_csreg *)0x20201000;

int i;
for(int = 0; i<UNGETMAX; i++)
{
  if(ungetArray[i] != '\0)
  {
    c = ungetArray[i];
    break;
  }
}

if(c == '\0')
{
  c=regptr->dr;
}

return c;



for kungetc - similar to ungetch() - The ungetch() function pushes the single-byte character ch onto the head of the input queue.
    
EXAMPLE IMPLEMENTATION OF UNGETCH()
    void ungetch(int c) /* push character back on input */
    {
        if (bufp >= BUFSIZE)
        {
            printf("ungetch: too many characters\n");
        }
        else
        {
            buf[bufp++] = c;
        }
        
WHAT WE NEED TO DO FOR KUNGETC()
   /**
 * kungetc - put a serial character "back" into a local buffer.
 * @param c character to unget.
 * @return c on success, SYSERR on failure.
 */
syscall kungetc(unsigned char c)
{
    // TODO: Check for room in unget buffer, put the character in or discard.

    return SYSERR;
}





